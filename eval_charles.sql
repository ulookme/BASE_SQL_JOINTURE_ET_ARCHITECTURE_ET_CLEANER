SET GLOBAL local_infile = 1;
USE DATA;
DROP TABLE IF EXISTS client_0;
CREATE TABLE client_0 (
ID SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
SHIPPING_MODE VARCHAR(40),
SHIPPING_PRICE VARCHAR(40),
WARRANTIES_FLG VARCHAR(40),
WARRANTIES_PRICE INT,
CARD_PAYMENT VARCHAR(40),
COUPON_PAYMENT INT,
RSP_PAYMENT INT,
WALLET_PAYMENT INT,
PRICECLUB_STATUS VARCHAR(40),
REGISTRATION_DATE INT,
PURCHASE_COUNT VARCHAR(40),
BUYER_BIRTHDAY_DATE VARCHAR(40),
BUYER_DEPARTMENT INT,
BUYING_DATE VARCHAR(40),
SELLER_SCORE_COUNT VARCHAR(40),
SELLER_SCORE_AVERAGE INT,
SELLER_COUNTRY VARCHAR(40),
SELLER_DEPARTMENT INT,
PRODUCT_TYPE VARCHAR(40),
PRODUCT_FAMILY VARCHAR(40),
ITEM_PRICE INT,
CLEF VARCHAR(30),
PRIMARY KEY (ID)
)
ENGINE=INNODB; 
LOAD DATA LOCAL INFILE '/Users/ano/Desktop/dossiersql/Base_eval.csv' INTO TABLE
client_0
CHARACTER SET
utf8mb4
FIELDS TERMINATED BY 
','
ENCLOSED BY 
'"'
LINES TERMINATED BY
'\n'
IGNORE 1 LINES;
SET GLOBAL local_infile = 1;
SELECT * FROM client_0;


---1 trouver le nombre de doublon

SELECT COUNT(*) AS doublon,
id,
SHIPPING_MODE,
SHIPPING_PRICE,
WARRANTIES_FLG,
WARRANTIES_PRICE,
CARD_PAYMENT,
COUPON_PAYMENT,
RSP_PAYMENT,
WALLET_PAYMENT,
PRICECLUB_STATUS,
REGISTRATION_DATE,
PURCHASE_COUNT,
BUYER_BIRTHDAY_DATE,
BUYER_DEPARTMENT,
BUYING_DATE,
SELLER_SCORE_COUNT,
SELLER_SCORE_AVERAGE,
SELLER_COUNTRY,
SELLER_DEPARTMENT,
PRODUCT_TYPE,
PRODUCT_FAMILY,
ITEM_PRICE,
FROM train
GROUP BY
id, 
SHIPPING_MODE,
SHIPPING_PRICE,
WARRANTIES_FLG,WARRANTIES_PRICE,
CARD_PAYMENT,
COUPON_PAYMENT,
RSP_PAYMENT,
WALLET_PAYMENT,
PRICECLUB_STATUS,
REGISTRATION_DATE,
PURCHASE_COUNT,
BUYER_BIRTHDAY_DATE,
BUYER_DEPARTMENT,
BUYING_DATE,
SELLER_SCORE_COUNT,
SELLER_SCORE_AVERAGE,
SELLER_COUNTRY,
SELLER_DEPARTMENT,
PRODUCT_TYPE,
PRODUCT_FAMILY,
ITEM_PRICE,
HAVING COUNT(*) > 1;

--- 2 requete pour suprimmer les doublons.

DELETE doublons.*
FROM train AS doublons
INNER JOIN (
   SELECT id, MIN(id) AS plus_petit_id
   FROM train
   GROUP BY id
   HAVING COUNT(*) > 1
) AS a_garder
ON a_garder.id = doublons.id
AND a_garder.plus_petit_id <> doublons.id


---combien de vendeur étranger avon nous 
SELECT SELLER_COUNTRY,COUNT(*) FROM TRAIN GROUP BY SELLER_COUNTRY;
SELECT SELLER_COUNTRY,COUNT(*),COUNT(*) FROM TRAIN GROUP BY SELLER_COUNTRY ;

---le nombre de vendeur francais métropolitan
SELECT SELLER_COUNTRY  FROM train
WHERE SELLER_COUNTRY= 'FRANCE, METROPOLITAN'
--- 3 le nombre de vendeur étranger 
SELECT SELLER_COUNTRY  FROM train
WHERE SELLER_COUNTRY <> 'FRANCE, METROPOLITAN';

---


--- 4 CRÉÉ LA table de vendeur 1 qui regroupe les etranger et créé une table de de VENDEUR 2 avec les france et créé une table 3 pour les vendeur francais métropolitain.

create table vendeur1 as
select SELLER_COUNTRY from train WHERE SELLER_COUNTRY<> 'FRANCE, METROPOLITAN';
---créer la table trois comporser de francais métropolitan
create table vendeur3 as
select SELLER_COUNTRY from train WHERE SELLER_COUNTRY = 'FRANCE, METROPOLITAN';

--- 6 le montant totale de vente par famille de produit

SELECT
    PRODUCT_FAMILY,
    SUM(CASE 
        WHEN INSTR(PURCHASE_COUNT, "<") <> 0 AND SUBSTR(PURCHASE_COUNT, 1, INSTR(PURCHASE_COUNT, "<") - 1) = "" THEN SUBSTR(PURCHASE_COUNT, INSTR(PURCHASE_COUNT, "<") + 1) / 2
        WHEN INSTR(PURCHASE_COUNT, "<") <> 0 THEN SUBSTR(PURCHASE_COUNT, 1, INSTR(PURCHASE_COUNT, "<") - 1) + (SUBSTR(PURCHASE_COUNT, INSTR(PURCHASE_COUNT, "<") + 1) - SUBSTR(PURCHASE_COUNT, 1, INSTR(PURCHASE_COUNT, "<") - 1)) / 2
        WHEN INSTR(PURCHASE_COUNT, ">") <> 0 THEN SUBSTR(PURCHASE_COUNT, INSTR(PURCHASE_COUNT, ">") + 1) / 2
        ELSE 0
    END) AS C_SI_SIMPLE
FROM 
    exo_2
GROUP BY PRODUCT_FAMILY;





